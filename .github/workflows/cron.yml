#name: Sismo Notification

#on:
#  schedule:
#    - cron: "*/5 * * * *" # Ejecutar cada 5 minutos

#jobs:
#  notify:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v3

#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: "18"

#      - name: Install dependencies
#        run: npm install node-fetch expo-server-sdk

#      - name: Fetch Sismo Data
#        id: fetch_sismo
#        run: |
#          echo "Fetching Sismo Data..."
#          RESPONSE=$(curl -s https://reportsismo.vercel.app/api/sismo)
#          echo "SISMO_RESPONSE=${RESPONSE}" >> $GITHUB_ENV

#      - name: Send Notifications
#        run: node sendNotifications.js
#        env:
#          SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}
















# name: Sismo Notification

# on:
#   schedule:
#     - cron: "*/5 * * * *" # Ejecutar cada 5 minutos

# jobs:
#   notify:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18"

#       - name: Restore cache
#         id: cache
#         uses: actions/cache@v3
#         with:
#           path: .sismo_cache
#           key: sismo-data-cache

#       - name: Fetch Sismo Data
#         id: fetch_sismo
#         run: |
#           mkdir -p .sismo_cache
#           LAST_SISMO=""
#           if [ -f ".sismo_cache/last_sismo.txt" ]; then
#             LAST_SISMO=$(cat .sismo_cache/last_sismo.txt)
#           fi

          # Obtener datos del endpoint
#           NEW_SISMO=$(curl -s https://reportsismo.vercel.app/api/sismo)

          # Verificar si la respuesta está vacía
#           if [ -z "$NEW_SISMO" ]; then
#             echo "La respuesta del endpoint está vacía. Finalizando tarea."
#             exit 0
#           fi

          # Comparar datos
#           if [ "$LAST_SISMO" == "$NEW_SISMO" ]; then
#             echo "No hay cambios en el sismo. Finalizando tarea."
#             exit 0
#           fi

          # Guardar el nuevo sismo en el caché
#           echo "$NEW_SISMO" > .sismo_cache/last_sismo.txt
#           echo "SISMO_RESPONSE=${NEW_SISMO}" >> $GITHUB_ENV

#       - name: Save cache
#         if: success()
#         uses: actions/cache@v3
#         with:
#           path: .sismo_cache
#           key: sismo-data-cache

#       - name: Send Notifications
#         if: env.SISMO_RESPONSE != ''
#         run: node sendNotifications.js
#         env:
#           SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}














# name: Sismo Notification

# on:
#   schedule:
#     - cron: "*/5 * * * *" # Ejecutar cada 5 minutos

# jobs:
#   notify:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18"

#       - name: Restore cache
#         id: cache
#         uses: actions/cache@v3
#         with:
#           path: .sismo_cache
#           key: sismo-data-cache

#       - name: Set up Firebase credentials
#         run: |
#           echo "${{ secrets.FIREBASE_CREDENTIALS }}" > ./earthsismo.json

#       - name: Fetch Sismo Data
#         id: fetch_sismo
#         run: |
#           mkdir -p .sismo_cache
#           LAST_SISMO=""
#           if [ -f ".sismo_cache/last_sismo.txt" ]; then
#             LAST_SISMO=$(cat .sismo_cache/last_sismo.txt)
#           fi

          # Obtener datos del endpoint
#           NEW_SISMO=$(curl -s --fail https://reportsismo.vercel.app/api/sismo || echo "")
          
          # Verificar si la respuesta está vacía o curl falló
#           if [ -z "$NEW_SISMO" ]; then
#             echo "La respuesta del endpoint está vacía o la solicitud falló. Finalizando tarea."
#             exit 0
#           fi

          # Comparar datos
#           if [ "$LAST_SISMO" == "$NEW_SISMO" ]; then
#             echo "No hay cambios en el sismo. Finalizando tarea."
#             exit 0
#           fi

          # Guardar el nuevo sismo en el caché y exportarlo como variable de entorno
#           echo "$NEW_SISMO" > .sismo_cache/last_sismo.txt
#           echo "SISMO_RESPONSE=${NEW_SISMO}" >> $GITHUB_ENV

#       - name: Save cache
#         uses: actions/cache@v3
#         with:
#           path: .sismo_cache
#           key: sismo-data-cache

#       - name: Send Notifications
#         if: env.SISMO_RESPONSE != ''
#         run: node sendNotifications.js
#         env:
#           SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}











#name: Sismo Notification

#on:
#  schedule:
#    - cron: "*/5 * * * *" # Ejecutar cada 5 minutos

#jobs:
#  notify:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v3

#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: "18"

#      - name: Restore cache
#        id: cache
#        uses: actions/cache@v3
#        with:
#          path: .sismo_cache
#          key: sismo-data-cache

#      - name: Set up Firebase credentials
#        run: echo "${{ secrets.FIREBASE_CREDENTIALS }}" > ./earthsismo.json

#      - name: Fetch Sismo Data
#        id: fetch_sismo
#        run: |
#          mkdir -p .sismo_cache
#          LAST_SISMO=""
#          if [ -f ".sismo_cache/last_sismo.txt" ]; then
#            LAST_SISMO=$(cat .sismo_cache/last_sismo.txt)
#          fi

          # Obtener datos del endpoint
#          NEW_SISMO=$(curl -s --fail https://reportsismo.vercel.app/api/sismo || echo "")
          
          # Verificar si la respuesta está vacía o curl falló
#          if [ -z "$NEW_SISMO" ]; then
#            echo "La respuesta del endpoint está vacía o la solicitud falló. Finalizando tarea."
#            exit 0
#          fi

          # Comparar datos
#          if [ "$LAST_SISMO" == "$NEW_SISMO" ]; then
#            echo "No hay cambios en el sismo. Finalizando tarea."
#            exit 0
#          fi

          # Guardar el nuevo sismo en el caché y exportarlo como variable de entorno
#          echo "$NEW_SISMO" > .sismo_cache/last_sismo.txt
#          echo "SISMO_RESPONSE=${NEW_SISMO}" >> $GITHUB_ENV

#      - name: Save cache
#        uses: actions/cache@v3
#        with:
#          path: .sismo_cache
#          key: sismo-data-cache

#      - name: Send Notifications
#        if: env.SISMO_RESPONSE != ''
#        run: node sendNotifications.js
#        env:
#          SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}












#name: Sismo Notification

#on:
#  schedule:
#    - cron: "*/5 * * * *"  # Ejecutar cada 5 minutos

#jobs:
#  notify:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v3

#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: "18"

#      - name: Restore cache
#        id: cache
#        uses: actions/cache@v3
#        with:
#          path: .sismo_cache
#          key: sismo-data-cache

#      - name: Configure Firebase Admin
#        env:
#          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_CREDENTIALS }}
#        run: |
#          echo "$FIREBASE_SERVICE_ACCOUNT" > firebase-service-account.json

#      - name: Fetch Sismo Data
#        id: fetch_sismo
#        run: |
#          mkdir -p .sismo_cache
#          LAST_SISMO=""
#          if [ -f ".sismo_cache/last_sismo.txt" ]; then
#            LAST_SISMO=$(cat .sismo_cache/last_sismo.txt)
#          fi

          # Obtener datos del endpoint
#          NEW_SISMO=$(curl -s --fail https://reportsismo.vercel.app/api/sismo || echo "")
          
          # Verificar si la respuesta está vacía o curl falló
#          if [ -z "$NEW_SISMO" ]; then
#            echo "La respuesta del endpoint está vacía o la solicitud falló. Finalizando tarea."
#            exit 0
#          fi

          # Comparar datos
#          if [ "$LAST_SISMO" == "$NEW_SISMO" ]; then
#            echo "No hay cambios en el sismo. Finalizando tarea."
#            exit 0
#          fi

          # Guardar el nuevo sismo en el caché y exportarlo como variable de entorno
#          echo "$NEW_SISMO" > .sismo_cache/last_sismo.txt
#          echo "SISMO_RESPONSE=${NEW_SISMO}" >> $GITHUB_ENV

#      - name: Save cache
#        uses: actions/cache@v3
#        with:
#          path: .sismo_cache
#          key: sismo-data-cache

#      - name: Send Notifications
#        if: env.SISMO_RESPONSE != ''
#        run: node sendNotifications.js
#        env:
#          SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}








#name: Sismo Notification

#on:
#  schedule:
#    - cron: "*/5 * * * *"  # Ejecutar cada 5 minutos

#jobs:
#  check_endpoint:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: "18"

#- name: Check out repository
#  uses: actions/checkout@v3

#      - name: Configure Firebase Admin
#        env:
#          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_CREDENTIALS }}
#        run: |
#          echo "$FIREBASE_SERVICE_ACCOUNT" > firebase-service-account.json

      # Descargar el archivo persistente si existe
#      - name: Descargar variable.json persistente
#        id: download_artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: variable.json
#        continue-on-error: true # No fallar si el artefacto no existe

#      - name: Configurar entorno
#        run: |
#          # Si variable.json no existe, crearlo vacío
#          if [ ! -f variable.json ]; then
#            echo "{}" > variable.json
#          fi

#      - name: Obtener respuesta del endpoint
#        id: curl_response
#        run: |
          # Hacer curl al endpoint y almacenar la respuesta en una variable
#          response=$(curl -s https://reportsismo.vercel.app/api/sismo)
#          echo "response=$response" >> $GITHUB_ENV

#      - name: Comparar respuesta
#        id: compare_response
#        run: |
          # Leer la respuesta almacenada previamente si existe
#          old_response=$(cat variable.json | jq -r '.old_response // ""')

          # Comparar la nueva respuesta con la antigua
#          if [[ "$old_response" == "$response" ]]; then
#            echo "Las respuestas son iguales. Terminando la tarea."
#            echo "updated=false" >> $GITHUB_ENV
#            exit 0
#          else
#            echo "Las respuestas son diferentes. Guardando nueva respuesta."
#            echo "{\"old_response\": \"$response\"}" > variable.json
#            echo "updated=true" >> $GITHUB_ENV
#          fi

#      - name: Ejecutar sendnotifications.js si hay actualización
#        if: env.updated == 'true'
#        run: |
          # Pasar la variable al script
#          echo "$response" > response.json
#          node ./sendNotifications.js response.json

#      - name: Guardar estado actualizado
#        if: always() # Este paso se ejecuta siempre para actualizar el artefacto
#        uses: actions/upload-artifact@v3
#        with:
#          name: variable.json
#          path: variable.json


name: Sismo Notification

on:
  schedule:
    - cron: "*/5 * * * *" # Ejecutar cada 5 minutos

jobs:
  firebase-admin-cron:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configuración de Firebase Admin
      - name: Configure Firebase Admin
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_CREDENTIALS }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > firebase-service-account.json

      # Paso 3: Inicializar variable persistente si no existe
      - name: Initialize persistent variable
        run: |
          if [ ! -f persistent_var.txt ]; then
            echo "null" > persistent_var.txt
          fi
        shell: bash

      # Paso 4: Obtener la respuesta del endpoint
      - name: Fetch response from API
        id: fetch_api_response
        run: |
          API_RESPONSE=$(curl -s https://reportsismo.vercel.app/api/sismo)
          echo "response=${API_RESPONSE}" >> $GITHUB_ENV

      # Paso 5: Comparar valores y enviar si es necesario
      - name: Compare values
        id: compare_values
        run: |
          PERSISTENT_VAR=$(cat persistent_var.txt)
          if [ "$PERSISTENT_VAR" = "$response" ]; then
            echo "Values are equal. Exiting..."
            exit 0
          else
            echo "Values are different. Sending old value to sendNotifications.js..."
            echo "$PERSISTENT_VAR" > input_for_sendNotifications.txt
            echo "Updating persistent variable with new response..."
            echo "$response" > persistent_var.txt
          fi
        env:
          response: ${{ env.response }}
        shell: bash

      # Paso 6: Ejecutar sendNotifications.js solo si hubo un cambio
      - name: Execute sendNotifications.js
        if: success() && steps.compare_values.outcome == 'success'
        run: |
          node sendNotifications.js input_for_sendNotifications.txt
