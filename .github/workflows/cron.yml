name: Sismo Notification

on:
  schedule:
    - cron: "*/5 * * * *"  # Ejecutar cada 5 minutos

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure Firebase Admin
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_CREDENTIALS }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > firebase-service-account.json
          echo "Contenido de FIREBASE_SERVICE_ACCOUNT: $FIREBASE_SERVICE_ACCOUNT"

      - name: Fetch new response
        id: fetch
        run: |
          RESPONSE=$(curl -s https://reportsismo.vercel.app/api/sismo | tr -d '\n' | tr -d ' ')
          if [ -z "$RESPONSE" ]; then
            echo "El curl devolvió un response vacío."
            exit 1
          fi
          echo "RESPONSE=$RESPONSE" >> $GITHUB_ENV
          echo "Nuevo Response: $RESPONSE"

      - name: Load previous response
        id: load-response
        run: |
          if [ -f sismo_cache/response.json ]; then
            PREVIOUS_RESPONSE=$(cat sismo_cache/response.json | tr -d '\n' | tr -d ' ')
            echo "PREVIOUS_RESPONSE=$PREVIOUS_RESPONSE" >> $GITHUB_ENV
            echo "Previous Response: $PREVIOUS_RESPONSE"
          else
            echo "No previous response found."
            echo "PREVIOUS_RESPONSE=" >> $GITHUB_ENV
          fi

      - name: Compare responses
        id: compare
        run: |
          echo "Comparando respuestas..."
          if [ "${{ env.PREVIOUS_RESPONSE }}" = "${{ env.RESPONSE }}" ]; then
            echo "El valor de la caché y la nueva respuesta son iguales."
            echo "SHOULD_NOTIFY=false" >> $GITHUB_ENV
          else
            echo "El valor de la caché y la nueva respuesta son diferentes."
            echo "SHOULD_NOTIFY=true" >> $GITHUB_ENV
          fi
          
      - name: Compute cache key
        id: compute-key
        run: |
          mkdir -p sismo_cache
          
          # Guarda la respuesta del sismo en el archivo antes de calcular la clave del caché
          echo "${{ env.RESPONSE }}" > sismo_cache/response.json
          echo "Respuesta guardada en el archivo de caché: $(cat sismo_cache/response.json)"

          if [ -f sismo_cache/response.json ]; then
            CACHE_KEY=$(cat sismo_cache/response.json | sha256sum | cut -d ' ' -f1)
          else
            CACHE_KEY=$(date +%s)
          fi
          echo "CACHE_KEY=sismo-response-cache-$CACHE_KEY" >> $GITHUB_ENV
          echo "CACHE_KEY calculado: sismo-response-cache-$CACHE_KEY"

      - name: Setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: sismo_cache
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            sismo-response-cache-

      - name: Actualizar y mostrar caché final
        run: |
          # Actualiza el caché con la nueva respuesta del sismo
          echo "${{ env.SISMO_RESPONSE }}" > sismo_cache/response.json
          echo "Valor actualizado de la caché: $(cat sismo_cache/response.json)"

      - name: Send Notifications
        if: env.SHOULD_NOTIFY == 'true'
        run: |
          echo "Enviando notificaciones con el siguiente SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}"
          node sendNotifications.js
        env:
          SISMO_RESPONSE: ${{ env.SISMO_RESPONSE }}
